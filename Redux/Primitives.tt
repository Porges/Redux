<#@ template language="C#" hostSpecific="false" #>
<#@ output extension=".cs" #>
using System;
using System.Runtime.CompilerServices;

namespace Redux
{
<#
 
    var typeNames =
		new[]
		{
		    new { name = "Index<T>", inner = "i32", gen = Generate.Comparable | Generate.Equatable },
			new { name = "Count<T>", inner = "i32", gen = Generate.Comparable | Generate.Equatable },
		    new { name = "i8", inner = "sbyte", gen = Generate.All },
		    new { name = "u8", inner = "byte", gen = Generate.All },
		    new { name = "i16", inner = "short", gen = Generate.All },
			new { name = "u16", inner = "ushort", gen = Generate.All},
			new { name = "i32", inner = "int", gen = Generate.All },
			new { name = "u32", inner = "uint", gen = Generate.All },
			new { name = "i64", inner = "long", gen = Generate.All },
			new { name = "u64", inner = "ulong", gen = Generate.All }
		};
	
    foreach (var names in typeNames)
	{
#>
    // ReSharper disable once InconsistentNaming
    public partial struct <#=names.name#> :
     	<# if (names.gen.HasFlag(Generate.Comparable)){ #>IComparable<<#=names.name #>>,<# } #>
        <# if (names.gen.HasFlag(Generate.Equatable)){ #>IEquatable<<#=names.name #>>,<# } #>
        IFormattable
	{
		internal <#=names.inner#> _value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public <#=System.Text.RegularExpressions.Regex.Replace(names.name, "<[^>]+>", "")#>(<#=names.inner#> value)
		{
			_value = value;
		}

<# if (names.gen.HasFlag(Generate.ImplicitConversions)) { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator <#=names.name#>(<#=names.inner#> value)
		{
			return new <#=names.name#>(value);
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator <#=names.inner#> (<#=names.name#> value)
		{
			return value._value;
		}
<# } #>

<# if (names.gen.HasFlag(Generate.Comparable)) { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool operator >(<#=names.name #> left, <#=names.name #> right)
		{
			return left._value > right._value;
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool operator <(<#=names.name #> left, <#=names.name #> right)
		{
			return left._value < right._value;
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool operator <=(<#=names.name #> left, <#=names.name #> right)
		{
			return left._value <= right._value;
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool operator >=(<#=names.name #> left, <#=names.name #> right)
		{
			return left._value >= right._value;
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public int CompareTo(<#=names.name#> other)
		{
			return _value.CompareTo(other._value);
		}
<# }  #>

<# if (names.gen.HasFlag(Generate.Arithmetic)) { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static <#=names.name#> operator <<(<#=names.name#> left, int right)
		{
			return (<#=names.inner#>)(left._value << right);
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static <#=names.name#> operator >>(<#=names.name#> left, int right)
		{
			return (<#=names.inner#>)(left._value >> right);
		}
<# } #>
		
<# if (names.gen.HasFlag(Generate.Equatable)) { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool operator ==(<#=names.name#> left, <#=names.name#> right)
		{
			return left._value == right._value;
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static bool operator !=(<#=names.name#> left, <#=names.name#> right)
		{
			return left._value != right._value;
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public bool Equals(<#=names.name#> right)
		{
			return this == right;
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public override bool Equals(object obj)
		{
			var other = obj as <#=names.name#>?;
			return other.HasValue && Equals(other.Value);
		}
<# } #>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public override int GetHashCode()
		{
			return _value.GetHashCode();
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public string ToString(string format, IFormatProvider formatProvider)
		{
			return _value.ToString(format, formatProvider);
		}
		
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		public override string ToString()
		{
			return _value.ToString();
		}
    }

<# } #>
}
<#+
	
	[FlagsAttribute]
	private enum Generate
    {
		Comparable = 1 << 0,
		Equatable = 1 << 1,
		Arithmetic = 1 << 2,
		Formattable = 1 << 3,
		ImplicitConversions = 1 << 4,
        All  = Comparable | Equatable | Arithmetic | Formattable | ImplicitConversions,
    }
#>